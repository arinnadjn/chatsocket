import threading
import socket

clients = []
messages = []


def send_last_10_messages(client_socket):
    client_socket.send("\nПоследние 10 сообщений: \n".encode())
    with open("chat.txt", "r") as file:
        lines = file.readlines()
        last_10_messages = lines[-10:]
        for message in last_10_messages:
            client_socket.send(message.encode())
    client_socket.send("---------------------------------- ".encode())


def handle_client(client_socket, address):
    try:
        nickname = client_socket.recv(1024).decode()
        print(f"New connection from {address}, nickname: {nickname}")

        # Отправка последних 10 сообщений новому клиенту
        send_last_10_messages(client_socket)

        clients.append((client_socket, nickname))

        while True:
            try:
                message = client_socket.recv(1024).decode()
                print(f"Received message from {nickname}: {message}")

                if message.lower() == "exit":
                    break

                messages.append(f"{nickname}: {message}")

                # Отправка сообщения всем клиентам
                for client in clients:
                    try:
                        client[0].send(f"{nickname}: {message}".encode())
                    except:
                        clients.remove(client)
            except:
                break
    finally:
        client_socket.close()
        clients.remove((client_socket, nickname))
        print(f"Connection from {address} closed")

        # Сохранение сообщений в файл
        with open("chat.txt", "w") as file:
            for msg in messages:
                file.write(f"{msg}\n")


def main():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('26.161.92.182', 12345))
    server.listen()
    print("Server is running...")

    # Загрузка истории чата из файла
    try:
        with open("chat.txt", "r") as file:
            messages.extend(file.read().splitlines())
    except FileNotFoundError:
        pass

    while True:
        client_socket, address = server.accept()
        client_thread = threading.Thread(target=handle_client, args=(client_socket, address))
        client_thread.start()


if __name__ == "__main__":
    main()
